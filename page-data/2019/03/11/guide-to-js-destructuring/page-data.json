{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/03/11/guide-to-js-destructuring/","result":{"data":{"site":{"siteMetadata":{"title":"Zack Hall"}},"markdownRemark":{"id":"43333393-12e4-5034-ba57-e11961b1e6c7","excerpt":"JavaScript destructuring allows you to quickly unpack values from JavaScript properties and arrays without declaring them one-by-one with the traditional dot…","html":"<p>JavaScript destructuring allows you to quickly unpack values from JavaScript properties and arrays without declaring them one-by-one with the traditional dot syntax.</p>\n<h2>Unpacking JS Object Properties</h2>\n<p>In this first example, let’s extract some simple properties from a JS object. Borrowing an example from my real-life, let’s say we’re building a wedding RSVP app. In the example below, we’ll extract the id and RSVP status from the guest invitation.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invite <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    givenName<span class=\"token operator\">:</span> <span class=\"token string\">\"Zack\"</span><span class=\"token punctuation\">,</span>\n    surname<span class=\"token operator\">:</span> <span class=\"token string\">\"Hall\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  rsvpStatus<span class=\"token operator\">:</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> rsvpStatus <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> invite<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// id === 1</span>\n<span class=\"token comment\">// rsvpStatus === pending</span></code></pre></div>\n<p>This is synonymous with the longer dot notation.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> invite<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rsvpStatus <span class=\"token operator\">=</span> invite<span class=\"token punctuation\">.</span>rsvpStatus<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Accessing Nested Object Properties</h3>\n<p>If we want to access nested objects, we can do that by simply matching the structure of the object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invite <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    givenName<span class=\"token operator\">:</span> <span class=\"token string\">'Zack'</span><span class=\"token punctuation\">,</span>\n    surname<span class=\"token operator\">:</span> <span class=\"token string\">'Hall'</span><span class=\"token punctuation\">,</span>\n  rsvpStatus<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> givenName<span class=\"token punctuation\">,</span> surname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> invite\n<span class=\"token comment\">// givenName === 'Zack'</span>\n<span class=\"token comment\">// surname === 'Hall'</span></code></pre></div>\n<h3>Renaming Object Properties</h3>\n<p>If you’d like to give the newly declared variable a different name than that which is used in the original object, you can do so by providing the new name separated with a colon.</p>\n<p>I often forget the order for renaming an object with destructuring. Do I place the property name before the new variable name? Or vice versa? To remember this, I think of it as a mini-function, with the original name as the input on the left of the colon and the desired name as the output on the right.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invite <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    givenName<span class=\"token operator\">:</span> <span class=\"token string\">'Zack'</span><span class=\"token punctuation\">,</span>\n    surname<span class=\"token operator\">:</span> <span class=\"token string\">'Hall'</span><span class=\"token punctuation\">,</span>\n  rsvpStatus<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> rsvpStatus<span class=\"token operator\">:</span> status <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> invite\n<span class=\"token comment\">// status === 'pending'</span>\n<span class=\"token comment\">// rsvpStatus is undeclared</span></code></pre></div>\n<p>You can do this for nested objects as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invite <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    givenName<span class=\"token operator\">:</span> <span class=\"token string\">'Zack'</span><span class=\"token punctuation\">,</span>\n    surname<span class=\"token operator\">:</span> <span class=\"token string\">'Hall'</span><span class=\"token punctuation\">,</span>\n  rsvpStatus<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> givenName<span class=\"token operator\">:</span> firstName<span class=\"token punctuation\">,</span> surname<span class=\"token operator\">:</span> lastName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> invite\n<span class=\"token comment\">// firstName === 'Zack'</span>\n<span class=\"token comment\">// lastName === 'Hall'</span></code></pre></div>\n<h3>Providing defaults</h3>\n<p>Another helpful feature of destructuring is the ability to provide default values. To provide a default value, simple provide the default after an equals sign.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invite <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    givenName<span class=\"token operator\">:</span> <span class=\"token string\">'Zack'</span><span class=\"token punctuation\">,</span>\n    surname<span class=\"token operator\">:</span> <span class=\"token string\">'Hall'</span><span class=\"token punctuation\">,</span>\n  rsvpStatus<span class=\"token operator\">:</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> rsvpStatus <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">,</span> foodPreference <span class=\"token operator\">=</span> <span class=\"token string\">'chicken'</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> invite\n<span class=\"token comment\">// rsvpStatus === 'confirmed'</span>\n<span class=\"token comment\">// foodPreference === 'chicken' since no value was specified</span></code></pre></div>\n<p>This is especially helpful when you have a function which accepts an object as a parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createRSVP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> rsvpStatus <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Combining defaults and renaming</h3>\n<p>Yep, you guessed it. You can of course provide a default and rename the property at the same time.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> invite <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    givenName<span class=\"token operator\">:</span> <span class=\"token string\">'Zack'</span><span class=\"token punctuation\">,</span>\n    surname<span class=\"token operator\">:</span> <span class=\"token string\">'Hall'</span><span class=\"token punctuation\">,</span>\n  rsvpStatus<span class=\"token operator\">:</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> rsvpStatus<span class=\"token operator\">:</span> status <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> invite\n<span class=\"token comment\">/// status === 'confirmed'</span></code></pre></div>\n<h2>Array Destructuring</h2>\n<p>Array destructuring allows you to unpack objects from an array based on their positioning. I find this to be less common. One particularly useful use case though is combining destructuring with the <code class=\"language-text\">split</code> function on a string. Take the following example where we might be gathering data from a CSV input source.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Example CSV Data</span>\n<span class=\"token comment\">// ID,Name,Status</span>\n<span class=\"token keyword\">var</span> csv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1,Zack,pending\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2,Vivian,confirmed\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3,Eric,confirmed\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ncsv<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> line<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// use data here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Quick Review of JS Destructuring","date":"March 11, 2019","description":"Declaring variables using JavaScript destructuring can help you write compact, cleaner code."}}},"pageContext":{"slug":"/2019/03/11/guide-to-js-destructuring/","previous":{"fields":{"slug":"/2017/06/09/dribble-pumps/"},"frontmatter":{"title":"Reebok Pumps Illustrations"}},"next":{"fields":{"slug":"/2019/04/03/event-loop/"},"frontmatter":{"title":"2 Conference Talks You Must Watch to Understand the JavaScript Event Loop"}}}}}